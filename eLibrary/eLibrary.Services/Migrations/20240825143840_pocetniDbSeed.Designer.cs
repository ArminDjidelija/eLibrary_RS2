// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eLibrary.Services.Database;

#nullable disable

namespace eLibrary.Services.Migrations
{
    [DbContext(typeof(ELibraryContext))]
    [Migration("20240825143840_pocetniDbSeed")]
    partial class pocetniDbSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eLibrary.Services.Database.Autori", b =>
                {
                    b.Property<int>("AutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutorId"));

                    b.Property<int?>("GodinaRodjenja")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("AutorId")
                        .HasName("PK__Autori__F58AE929E28C90E7");

                    b.ToTable("Autori", (string)null);

                    b.HasData(
                        new
                        {
                            AutorId = 1,
                            GodinaRodjenja = 1828,
                            Ime = "Leo",
                            IsDeleted = false,
                            Prezime = "Tolstoj"
                        },
                        new
                        {
                            AutorId = 2,
                            GodinaRodjenja = 1899,
                            Ime = "Ernest",
                            IsDeleted = false,
                            Prezime = "Hemingway"
                        },
                        new
                        {
                            AutorId = 3,
                            GodinaRodjenja = 1883,
                            Ime = "Franz",
                            IsDeleted = false,
                            Prezime = "Kafka"
                        },
                        new
                        {
                            AutorId = 4,
                            GodinaRodjenja = 1895,
                            Ime = "Sergej",
                            IsDeleted = false,
                            Prezime = "Jesenjin"
                        },
                        new
                        {
                            AutorId = 5,
                            GodinaRodjenja = 1799,
                            Ime = "Alexander",
                            IsDeleted = false,
                            Prezime = "Pushkin"
                        },
                        new
                        {
                            AutorId = 6,
                            GodinaRodjenja = 1821,
                            Ime = "Fjodor",
                            IsDeleted = false,
                            Prezime = "Dostojevski"
                        },
                        new
                        {
                            AutorId = 7,
                            GodinaRodjenja = 1903,
                            Ime = "George",
                            IsDeleted = false,
                            Prezime = "Orwell"
                        },
                        new
                        {
                            AutorId = 8,
                            GodinaRodjenja = 1835,
                            Ime = "Mark",
                            IsDeleted = false,
                            Prezime = "Twain"
                        },
                        new
                        {
                            AutorId = 9,
                            GodinaRodjenja = 1845,
                            Ime = "Charles",
                            IsDeleted = false,
                            Prezime = "Dickens"
                        },
                        new
                        {
                            AutorId = 10,
                            GodinaRodjenja = 1828,
                            Ime = "Jules",
                            IsDeleted = false,
                            Prezime = "Verne"
                        },
                        new
                        {
                            AutorId = 11,
                            GodinaRodjenja = 1910,
                            Ime = "Meša",
                            IsDeleted = false,
                            Prezime = "Selimović"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.BibliotekaCitaociZabrane", b =>
                {
                    b.Property<int>("BibliotekaCitaocZabranaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BibliotekaCitaocZabranaId"));

                    b.Property<int>("BibliotekaId")
                        .HasColumnType("int");

                    b.Property<int>("CitalacId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RokZabrane")
                        .HasColumnType("datetime");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("BibliotekaCitaocZabranaId")
                        .HasName("PK__Bibliote__715D033F62DD5922");

                    b.HasIndex("BibliotekaId");

                    b.HasIndex("CitalacId");

                    b.ToTable("BibliotekaCitaociZabrane", (string)null);
                });

            modelBuilder.Entity("eLibrary.Services.Database.BibliotekaKnjige", b =>
                {
                    b.Property<int>("BibliotekaKnjigaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BibliotekaKnjigaId"));

                    b.Property<int>("BibliotekaId")
                        .HasColumnType("int");

                    b.Property<int>("BrojKopija")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumDodavanja")
                        .HasColumnType("datetime");

                    b.Property<int?>("DostupnoCitaonica")
                        .HasColumnType("int");

                    b.Property<int?>("DostupnoPozajmica")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KnjigaId")
                        .HasColumnType("int");

                    b.Property<string>("Lokacija")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("BibliotekaKnjigaId")
                        .HasName("PK__Bibliote__1B347E4186C1376E");

                    b.HasIndex("BibliotekaId");

                    b.HasIndex("KnjigaId");

                    b.ToTable("BibliotekaKnjige", (string)null);

                    b.HasData(
                        new
                        {
                            BibliotekaKnjigaId = 12,
                            BibliotekaId = 2,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(514),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 1,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 13,
                            BibliotekaId = 2,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(519),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 2,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 15,
                            BibliotekaId = 2,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(523),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 4,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 16,
                            BibliotekaId = 2,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(526),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 7,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 17,
                            BibliotekaId = 2,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(529),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 6,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 18,
                            BibliotekaId = 3,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(533),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 6,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 19,
                            BibliotekaId = 3,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(536),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 4,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 20,
                            BibliotekaId = 3,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(540),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 8,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 21,
                            BibliotekaId = 3,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(543),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 1,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 22,
                            BibliotekaId = 3,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(547),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 10,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 26,
                            BibliotekaId = 4,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(550),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 1,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 27,
                            BibliotekaId = 4,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(553),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 2,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 28,
                            BibliotekaId = 4,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(557),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 5,
                            Lokacija = "B1"
                        },
                        new
                        {
                            BibliotekaKnjigaId = 29,
                            BibliotekaId = 4,
                            BrojKopija = 30,
                            DatumDodavanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(560),
                            DostupnoCitaonica = 25,
                            DostupnoPozajmica = 20,
                            IsDeleted = false,
                            KnjigaId = 6,
                            Lokacija = "B1"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.BibliotekaUposleni", b =>
                {
                    b.Property<int>("BibliotekaUposleniId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BibliotekaUposleniId"));

                    b.Property<int>("BibliotekaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatumUposlenja")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("BibliotekaUposleniId")
                        .HasName("PK__Bibliote__304DBEB3A7395A71");

                    b.HasIndex("BibliotekaId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("BibliotekaUposleni", (string)null);

                    b.HasData(
                        new
                        {
                            BibliotekaUposleniId = 1,
                            BibliotekaId = 2,
                            DatumUposlenja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(195),
                            IsDeleted = false,
                            KorisnikId = 2
                        },
                        new
                        {
                            BibliotekaUposleniId = 2,
                            BibliotekaId = 3,
                            DatumUposlenja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(270),
                            IsDeleted = false,
                            KorisnikId = 3
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Biblioteke", b =>
                {
                    b.Property<int>("BibliotekaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BibliotekaId"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KantonId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Web")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("BibliotekaId")
                        .HasName("PK__Bibliote__369560083A40BDAF");

                    b.HasIndex("KantonId");

                    b.ToTable("Biblioteke", (string)null);

                    b.HasData(
                        new
                        {
                            BibliotekaId = 2,
                            Adresa = "Maršala Tita 55",
                            IsDeleted = false,
                            KantonId = 7,
                            Mail = "nbm@mail",
                            Naziv = "Narodna biblioteka Mostar",
                            Opis = "Opis biblioteke Narodna Mostar",
                            Telefon = "06456465",
                            Web = "www.npm.ba"
                        },
                        new
                        {
                            BibliotekaId = 3,
                            Adresa = "Sjeverni logor, bb",
                            IsDeleted = false,
                            KantonId = 7,
                            Mail = "mail",
                            Naziv = "Univerzitetska biblioteka Džemal Bijedić",
                            Opis = "Opis biblioteke",
                            Telefon = "06456465",
                            Web = "unmo.ba"
                        },
                        new
                        {
                            BibliotekaId = 4,
                            Adresa = "Vilsonovo šetalište",
                            IsDeleted = false,
                            KantonId = 9,
                            Mail = "unbs@gmail.com",
                            Naziv = "Univerzitetska biblioteka Sarajevo",
                            Opis = "Opis biblioteke",
                            Telefon = "789789789",
                            Web = "www.unbs.ba"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.CiljneGrupe", b =>
                {
                    b.Property<int>("CiljnaGrupaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CiljnaGrupaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("CiljnaGrupaId")
                        .HasName("PK__CiljneGr__98C6319855A6FEAB");

                    b.ToTable("CiljneGrupe", (string)null);

                    b.HasData(
                        new
                        {
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            Naziv = "Odrasli >18"
                        },
                        new
                        {
                            CiljnaGrupaId = 2,
                            IsDeleted = false,
                            Naziv = "Djeca"
                        },
                        new
                        {
                            CiljnaGrupaId = 3,
                            IsDeleted = false,
                            Naziv = "Ozbiljna"
                        },
                        new
                        {
                            CiljnaGrupaId = 4,
                            IsDeleted = false,
                            Naziv = "10-14"
                        },
                        new
                        {
                            CiljnaGrupaId = 5,
                            IsDeleted = false,
                            Naziv = "14-18"
                        },
                        new
                        {
                            CiljnaGrupaId = 6,
                            IsDeleted = false,
                            Naziv = "Opšte štivo"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.CitalacKnjigaLog", b =>
                {
                    b.Property<int>("CitalacKnjigaLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitalacKnjigaLogId"));

                    b.Property<int>("CitalacId")
                        .HasColumnType("int");

                    b.Property<int>("KnjigaId")
                        .HasColumnType("int");

                    b.HasKey("CitalacKnjigaLogId");

                    b.HasIndex("CitalacId");

                    b.HasIndex("KnjigaId");

                    b.ToTable("CitalacKnjigaLogs");

                    b.HasData(
                        new
                        {
                            CitalacKnjigaLogId = 1,
                            CitalacId = 1,
                            KnjigaId = 1
                        },
                        new
                        {
                            CitalacKnjigaLogId = 2,
                            CitalacId = 1,
                            KnjigaId = 2
                        },
                        new
                        {
                            CitalacKnjigaLogId = 3,
                            CitalacId = 2,
                            KnjigaId = 5
                        },
                        new
                        {
                            CitalacKnjigaLogId = 4,
                            CitalacId = 2,
                            KnjigaId = 6
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Citaoci", b =>
                {
                    b.Property<int>("CitalacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitalacId"));

                    b.Property<DateTime>("DatumRegistracije")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Institucija")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KantonId")
                        .HasColumnType("int");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("CitalacId")
                        .HasName("PK__Citaoci__45A5BCBDC7258AF3");

                    b.HasIndex("KantonId");

                    b.ToTable("Citaoci", (string)null);

                    b.HasData(
                        new
                        {
                            CitalacId = 1,
                            DatumRegistracije = new DateTime(2024, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "citalac1@gmail.com",
                            Ime = "Citalac1",
                            Institucija = "Fakultet informacijskih tehnologija",
                            IsDeleted = false,
                            KantonId = 7,
                            KorisnickoIme = "citalac1",
                            LozinkaHash = "2pka8gGVbEqAsY4ijeBsTJehv9Y==",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Citalac1",
                            Status = true,
                            Telefon = "06060606"
                        },
                        new
                        {
                            CitalacId = 2,
                            DatumRegistracije = new DateTime(2024, 7, 20, 14, 48, 41, 913, DateTimeKind.Unspecified),
                            Email = "citalac2@gmail.com",
                            Ime = "Citalac2",
                            Institucija = "Fakultet informacijskih tehnologija",
                            IsDeleted = false,
                            KantonId = 7,
                            KorisnickoIme = "citalac2",
                            LozinkaHash = "lUm1ZkjJ+8kF1mKNyCNUZToua6Y=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Citalac2",
                            Status = true,
                            Telefon = "06060606"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Clanarine", b =>
                {
                    b.Property<int>("ClanarinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClanarinaId"));

                    b.Property<int>("BibliotekaId")
                        .HasColumnType("int");

                    b.Property<int>("CitalacId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Iznos")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<DateTime>("Kraj")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Pocetak")
                        .HasColumnType("datetime");

                    b.Property<int>("TipClanarineBibliotekaId")
                        .HasColumnType("int");

                    b.Property<int>("UplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("ClanarinaId")
                        .HasName("PK__Clanarin__C51E3B97E16AE754");

                    b.HasIndex("BibliotekaId");

                    b.HasIndex("CitalacId");

                    b.HasIndex("TipClanarineBibliotekaId");

                    b.HasIndex("UplateId");

                    b.ToTable("Clanarine", (string)null);

                    b.HasData(
                        new
                        {
                            ClanarinaId = 1,
                            BibliotekaId = 2,
                            CitalacId = 1,
                            IsDeleted = false,
                            Iznos = 4.00m,
                            Kraj = new DateTime(2024, 9, 9, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(969),
                            Pocetak = new DateTime(2024, 8, 10, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(966),
                            TipClanarineBibliotekaId = 1,
                            UplateId = 1
                        },
                        new
                        {
                            ClanarinaId = 2,
                            BibliotekaId = 2,
                            CitalacId = 1,
                            IsDeleted = false,
                            Iznos = 10.00m,
                            Kraj = new DateTime(2024, 12, 8, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(975),
                            Pocetak = new DateTime(2024, 9, 9, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(973),
                            TipClanarineBibliotekaId = 2,
                            UplateId = 2
                        },
                        new
                        {
                            ClanarinaId = 3,
                            BibliotekaId = 2,
                            CitalacId = 2,
                            IsDeleted = false,
                            Iznos = 4.00m,
                            Kraj = new DateTime(2024, 9, 9, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(980),
                            Pocetak = new DateTime(2024, 8, 10, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(978),
                            TipClanarineBibliotekaId = 1,
                            UplateId = 3
                        },
                        new
                        {
                            ClanarinaId = 4,
                            BibliotekaId = 2,
                            CitalacId = 2,
                            IsDeleted = false,
                            Iznos = 4.00m,
                            Kraj = new DateTime(2024, 12, 8, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(985),
                            Pocetak = new DateTime(2024, 9, 9, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(983),
                            TipClanarineBibliotekaId = 1,
                            UplateId = 4
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Izdavaci", b =>
                {
                    b.Property<int>("IzdavacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IzdavacId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("IzdavacId")
                        .HasName("PK__Izdavaci__6D80AC10BA28287F");

                    b.ToTable("Izdavaci", (string)null);

                    b.HasData(
                        new
                        {
                            IzdavacId = 1,
                            IsDeleted = false,
                            Naziv = "BH Most"
                        },
                        new
                        {
                            IzdavacId = 2,
                            IsDeleted = false,
                            Naziv = "Globus Media"
                        },
                        new
                        {
                            IzdavacId = 3,
                            IsDeleted = false,
                            Naziv = "Laguna"
                        },
                        new
                        {
                            IzdavacId = 4,
                            IsDeleted = false,
                            Naziv = "Plato"
                        },
                        new
                        {
                            IzdavacId = 5,
                            IsDeleted = false,
                            Naziv = "Nova knjiga, Kosmos"
                        },
                        new
                        {
                            IzdavacId = 6,
                            IsDeleted = false,
                            Naziv = "Rabic"
                        },
                        new
                        {
                            IzdavacId = 7,
                            IsDeleted = false,
                            Naziv = "Otvorena knjiga"
                        },
                        new
                        {
                            IzdavacId = 9,
                            IsDeleted = false,
                            Naziv = "Školska knjiga"
                        },
                        new
                        {
                            IzdavacId = 10,
                            IsDeleted = false,
                            Naziv = "Fakultet informacijskih tehnologija Mostar"
                        },
                        new
                        {
                            IzdavacId = 11,
                            IsDeleted = false,
                            Naziv = "Građevinski fakultet Mostar"
                        },
                        new
                        {
                            IzdavacId = 12,
                            IsDeleted = false,
                            Naziv = "Mašinski fakultet Mostar"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Jezici", b =>
                {
                    b.Property<int>("JezikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JezikId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("JezikId")
                        .HasName("PK__Jezici__E9261E091F9E1639");

                    b.ToTable("Jezici", (string)null);

                    b.HasData(
                        new
                        {
                            JezikId = 1,
                            IsDeleted = false,
                            Naziv = "Bosanski"
                        },
                        new
                        {
                            JezikId = 2,
                            IsDeleted = false,
                            Naziv = "Hrvatski"
                        },
                        new
                        {
                            JezikId = 3,
                            IsDeleted = false,
                            Naziv = "Srpski"
                        },
                        new
                        {
                            JezikId = 4,
                            IsDeleted = false,
                            Naziv = "Engleski"
                        },
                        new
                        {
                            JezikId = 5,
                            IsDeleted = false,
                            Naziv = "Crnogorski"
                        },
                        new
                        {
                            JezikId = 6,
                            IsDeleted = false,
                            Naziv = "Njemački"
                        },
                        new
                        {
                            JezikId = 7,
                            IsDeleted = false,
                            Naziv = "Španski"
                        },
                        new
                        {
                            JezikId = 8,
                            IsDeleted = false,
                            Naziv = "Francuski"
                        },
                        new
                        {
                            JezikId = 9,
                            IsDeleted = false,
                            Naziv = "Ruski"
                        },
                        new
                        {
                            JezikId = 10,
                            IsDeleted = false,
                            Naziv = "Slovenski"
                        },
                        new
                        {
                            JezikId = 11,
                            IsDeleted = false,
                            Naziv = "Indijski"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Kantoni", b =>
                {
                    b.Property<int>("KantonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KantonId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Skracenica")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("KantonId")
                        .HasName("PK__Kantoni__F1D12B6139ED8790");

                    b.ToTable("Kantoni", (string)null);

                    b.HasData(
                        new
                        {
                            KantonId = 1,
                            IsDeleted = false,
                            Naziv = "Unsko-sanski kanton",
                            Skracenica = "USK"
                        },
                        new
                        {
                            KantonId = 2,
                            IsDeleted = false,
                            Naziv = "Posavski kanton",
                            Skracenica = "PK"
                        },
                        new
                        {
                            KantonId = 3,
                            IsDeleted = false,
                            Naziv = "Tuzlanski kanton",
                            Skracenica = "TK"
                        },
                        new
                        {
                            KantonId = 4,
                            IsDeleted = false,
                            Naziv = "Zenicko-dobojski kanton",
                            Skracenica = "ZDK"
                        },
                        new
                        {
                            KantonId = 5,
                            IsDeleted = false,
                            Naziv = "Bosansko-podrinjski kanton Goražde",
                            Skracenica = "BPK"
                        },
                        new
                        {
                            KantonId = 6,
                            IsDeleted = false,
                            Naziv = "Srednjobosanski kanton",
                            Skracenica = "SBK"
                        },
                        new
                        {
                            KantonId = 7,
                            IsDeleted = false,
                            Naziv = "Hercegovacko-neretvanski kanton",
                            Skracenica = "HNK"
                        },
                        new
                        {
                            KantonId = 8,
                            IsDeleted = false,
                            Naziv = "Zapadnohercegovacki kanton",
                            Skracenica = "ZHK"
                        },
                        new
                        {
                            KantonId = 9,
                            IsDeleted = false,
                            Naziv = "Kanton Sarajevo",
                            Skracenica = "KS"
                        },
                        new
                        {
                            KantonId = 10,
                            IsDeleted = false,
                            Naziv = "Kanton 10",
                            Skracenica = "K10"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.KnjigaAutori", b =>
                {
                    b.Property<int>("KnjigaAutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KnjigaAutorId"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KnjigaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("KnjigaAutorId")
                        .HasName("PK__KnjigaAu__7CCCDDD646DBDFE0");

                    b.HasIndex("AutorId");

                    b.HasIndex("KnjigaId");

                    b.ToTable("KnjigaAutori", (string)null);

                    b.HasData(
                        new
                        {
                            KnjigaAutorId = 1,
                            AutorId = 2,
                            IsDeleted = false,
                            KnjigaId = 1
                        },
                        new
                        {
                            KnjigaAutorId = 2,
                            AutorId = 1,
                            IsDeleted = false,
                            KnjigaId = 2
                        },
                        new
                        {
                            KnjigaAutorId = 3,
                            AutorId = 1,
                            IsDeleted = false,
                            KnjigaId = 4
                        },
                        new
                        {
                            KnjigaAutorId = 4,
                            AutorId = 3,
                            IsDeleted = false,
                            KnjigaId = 5
                        },
                        new
                        {
                            KnjigaAutorId = 5,
                            AutorId = 5,
                            IsDeleted = false,
                            KnjigaId = 6
                        },
                        new
                        {
                            KnjigaAutorId = 6,
                            AutorId = 4,
                            IsDeleted = false,
                            KnjigaId = 7
                        },
                        new
                        {
                            KnjigaAutorId = 7,
                            AutorId = 7,
                            IsDeleted = false,
                            KnjigaId = 8
                        },
                        new
                        {
                            KnjigaAutorId = 8,
                            AutorId = 8,
                            IsDeleted = false,
                            KnjigaId = 9
                        },
                        new
                        {
                            KnjigaAutorId = 9,
                            AutorId = 10,
                            IsDeleted = false,
                            KnjigaId = 10
                        },
                        new
                        {
                            KnjigaAutorId = 10,
                            AutorId = 1,
                            IsDeleted = false,
                            KnjigaId = 13
                        },
                        new
                        {
                            KnjigaAutorId = 11,
                            AutorId = 6,
                            IsDeleted = false,
                            KnjigaId = 14
                        },
                        new
                        {
                            KnjigaAutorId = 12,
                            AutorId = 11,
                            IsDeleted = false,
                            KnjigaId = 15
                        },
                        new
                        {
                            KnjigaAutorId = 17,
                            AutorId = 13,
                            IsDeleted = false,
                            KnjigaId = 20
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.KnjigaCiljneGrupe", b =>
                {
                    b.Property<int>("KnjigaCiljnaGrupaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KnjigaCiljnaGrupaId"));

                    b.Property<int>("CiljnaGrupaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KnjigaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("KnjigaCiljnaGrupaId")
                        .HasName("PK__KnjigaCi__4EFEF21A74FFA6F1");

                    b.HasIndex("CiljnaGrupaId");

                    b.HasIndex("KnjigaId");

                    b.ToTable("KnjigaCiljneGrupe", (string)null);

                    b.HasData(
                        new
                        {
                            KnjigaCiljnaGrupaId = 1,
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            KnjigaId = 1
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 2,
                            CiljnaGrupaId = 2,
                            IsDeleted = false,
                            KnjigaId = 1
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 3,
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            KnjigaId = 2
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 4,
                            CiljnaGrupaId = 5,
                            IsDeleted = false,
                            KnjigaId = 2
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 5,
                            CiljnaGrupaId = 3,
                            IsDeleted = false,
                            KnjigaId = 2
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 6,
                            CiljnaGrupaId = 6,
                            IsDeleted = false,
                            KnjigaId = 4
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 7,
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            KnjigaId = 5
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 8,
                            CiljnaGrupaId = 4,
                            IsDeleted = false,
                            KnjigaId = 5
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 9,
                            CiljnaGrupaId = 5,
                            IsDeleted = false,
                            KnjigaId = 5
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 10,
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            KnjigaId = 6
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 11,
                            CiljnaGrupaId = 4,
                            IsDeleted = false,
                            KnjigaId = 6
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 12,
                            CiljnaGrupaId = 15,
                            IsDeleted = false,
                            KnjigaId = 6
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 13,
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            KnjigaId = 7
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 14,
                            CiljnaGrupaId = 3,
                            IsDeleted = false,
                            KnjigaId = 7
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 15,
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            KnjigaId = 8
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 16,
                            CiljnaGrupaId = 3,
                            IsDeleted = false,
                            KnjigaId = 8
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 17,
                            CiljnaGrupaId = 2,
                            IsDeleted = false,
                            KnjigaId = 9
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 18,
                            CiljnaGrupaId = 6,
                            IsDeleted = false,
                            KnjigaId = 9
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 19,
                            CiljnaGrupaId = 6,
                            IsDeleted = false,
                            KnjigaId = 10
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 20,
                            CiljnaGrupaId = 2,
                            IsDeleted = false,
                            KnjigaId = 10
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 21,
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            KnjigaId = 13
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 22,
                            CiljnaGrupaId = 3,
                            IsDeleted = false,
                            KnjigaId = 13
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 23,
                            CiljnaGrupaId = 5,
                            IsDeleted = false,
                            KnjigaId = 13
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 24,
                            CiljnaGrupaId = 5,
                            IsDeleted = false,
                            KnjigaId = 14
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 25,
                            CiljnaGrupaId = 1,
                            IsDeleted = false,
                            KnjigaId = 14
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 26,
                            CiljnaGrupaId = 3,
                            IsDeleted = false,
                            KnjigaId = 14
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 27,
                            CiljnaGrupaId = 5,
                            IsDeleted = false,
                            KnjigaId = 15
                        },
                        new
                        {
                            KnjigaCiljnaGrupaId = 28,
                            CiljnaGrupaId = 6,
                            IsDeleted = false,
                            KnjigaId = 20
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.KnjigaVrsteSadrzaja", b =>
                {
                    b.Property<int>("KnjigaVrstaSadrzajaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KnjigaVrstaSadrzajaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KnjigaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("VrstaSadrzajaId")
                        .HasColumnType("int");

                    b.HasKey("KnjigaVrstaSadrzajaId")
                        .HasName("PK__KnjigaVr__1CC05BC6BF4EB248");

                    b.HasIndex("KnjigaId");

                    b.HasIndex("VrstaSadrzajaId");

                    b.ToTable("KnjigaVrsteSadrzaja", (string)null);

                    b.HasData(
                        new
                        {
                            KnjigaVrstaSadrzajaId = 1,
                            IsDeleted = false,
                            KnjigaId = 1,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 2,
                            IsDeleted = false,
                            KnjigaId = 2,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 3,
                            IsDeleted = false,
                            KnjigaId = 2,
                            VrstaSadrzajaId = 24
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 4,
                            IsDeleted = false,
                            KnjigaId = 4,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 5,
                            IsDeleted = false,
                            KnjigaId = 4,
                            VrstaSadrzajaId = 24
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 6,
                            IsDeleted = false,
                            KnjigaId = 5,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 7,
                            IsDeleted = false,
                            KnjigaId = 5,
                            VrstaSadrzajaId = 24
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 8,
                            IsDeleted = false,
                            KnjigaId = 6,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 9,
                            IsDeleted = false,
                            KnjigaId = 6,
                            VrstaSadrzajaId = 24
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 10,
                            IsDeleted = false,
                            KnjigaId = 7,
                            VrstaSadrzajaId = 2
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 11,
                            IsDeleted = false,
                            KnjigaId = 7,
                            VrstaSadrzajaId = 24
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 12,
                            IsDeleted = false,
                            KnjigaId = 8,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 13,
                            IsDeleted = false,
                            KnjigaId = 8,
                            VrstaSadrzajaId = 24
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 14,
                            IsDeleted = false,
                            KnjigaId = 9,
                            VrstaSadrzajaId = 25
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 15,
                            IsDeleted = false,
                            KnjigaId = 9,
                            VrstaSadrzajaId = 26
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 16,
                            IsDeleted = false,
                            KnjigaId = 10,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 17,
                            IsDeleted = false,
                            KnjigaId = 10,
                            VrstaSadrzajaId = 26
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 18,
                            IsDeleted = false,
                            KnjigaId = 13,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 19,
                            IsDeleted = false,
                            KnjigaId = 13,
                            VrstaSadrzajaId = 24
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 20,
                            IsDeleted = false,
                            KnjigaId = 14,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 21,
                            IsDeleted = false,
                            KnjigaId = 14,
                            VrstaSadrzajaId = 24
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 22,
                            IsDeleted = false,
                            KnjigaId = 15,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 29,
                            IsDeleted = false,
                            KnjigaId = 20,
                            VrstaSadrzajaId = 1
                        },
                        new
                        {
                            KnjigaVrstaSadrzajaId = 30,
                            IsDeleted = false,
                            KnjigaId = 20,
                            VrstaSadrzajaId = 24
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Knjige", b =>
                {
                    b.Property<int>("KnjigaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KnjigaId"));

                    b.Property<int>("BrojIzdanja")
                        .HasColumnType("int");

                    b.Property<int>("BrojStranica")
                        .HasColumnType("int");

                    b.Property<int>("GodinaIzdanja")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Isbn")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("IzdavacId")
                        .HasColumnType("int");

                    b.Property<int>("JezikId")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UvezId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("VrsteGradeId")
                        .HasColumnType("int");

                    b.HasKey("KnjigaId")
                        .HasName("PK__Knjige__4A1281F3D12ED027");

                    b.HasIndex("IzdavacId");

                    b.HasIndex("JezikId");

                    b.HasIndex("UvezId");

                    b.HasIndex("VrsteGradeId");

                    b.ToTable("Knjige", (string)null);

                    b.HasData(
                        new
                        {
                            KnjigaId = 1,
                            BrojIzdanja = 1,
                            BrojStranica = 89,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-9958-771-38-5",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Starac i more",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 2,
                            BrojIzdanja = 1,
                            BrojStranica = 890,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-86-521-3555-4",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Ana Karenjina",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 4,
                            BrojIzdanja = 1,
                            BrojStranica = 800,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-86-521-4508-9",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Rat i mir 1",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 5,
                            BrojIzdanja = 1,
                            BrojStranica = 220,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-86-447-0687-8",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Proces",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 6,
                            BrojIzdanja = 1,
                            BrojStranica = 123,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "9788663693722",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Kapetanova kći",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 7,
                            BrojIzdanja = 1,
                            BrojStranica = 230,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-9958-771-38-5",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "105 pjesama",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 8,
                            BrojIzdanja = 1,
                            BrojStranica = 267,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-86-7674-205-9",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "1984",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 9,
                            BrojIzdanja = 1,
                            BrojStranica = 430,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-953-0-60381-3",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Pustolovine Toma Sawyera",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 10,
                            BrojIzdanja = 1,
                            BrojStranica = 56,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-9958-41-300-1",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Put oko svijeta za 80 dana",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 13,
                            BrojIzdanja = 1,
                            BrojStranica = 832,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-86-521-4509-6",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Rat i mir II",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 14,
                            BrojIzdanja = 1,
                            BrojStranica = 616,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-9958-18-142-9",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Zločin i kazna",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 15,
                            BrojIzdanja = 1,
                            BrojStranica = 418,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "978-9958-29-222-4",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Derviš i smrt",
                            UvezId = 1,
                            VrsteGradeId = 1
                        },
                        new
                        {
                            KnjigaId = 20,
                            BrojIzdanja = 1,
                            BrojStranica = 160,
                            GodinaIzdanja = 2020,
                            IsDeleted = false,
                            Isbn = "953-196-904-3",
                            IzdavacId = 1,
                            JezikId = 1,
                            Napomena = "",
                            Naslov = "Dekameron",
                            UvezId = 1,
                            VrsteGradeId = 1
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Korisnici", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("KorisnikId")
                        .HasName("PK__Korisnic__80B06D411FF047A1");

                    b.ToTable("Korisnici", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            Email = "admin@elibrary.ba",
                            Ime = "Admin",
                            IsDeleted = false,
                            KorisnickoIme = "admin",
                            LozinkaHash = "c1WzmHn/IfIrmkynZcsLyWHuzqE=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Admin",
                            Status = true,
                            Telefon = "06060606060606"
                        },
                        new
                        {
                            KorisnikId = 2,
                            Email = "bibl1@gmail.com",
                            Ime = "Bibliotekar1",
                            IsDeleted = false,
                            KorisnickoIme = "bibliotekar1",
                            LozinkaHash = "9MF7KTZlFft51eQvyTtlgmYQlOs=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Bibliotekar1",
                            Status = true,
                            Telefon = "06060606"
                        },
                        new
                        {
                            KorisnikId = 3,
                            Email = "bibl2@gmail.com",
                            Ime = "Bibliotekar2",
                            IsDeleted = false,
                            KorisnickoIme = "bibliotekar2",
                            LozinkaHash = "aK8cml17lpwbriKaVDWacJdixas=",
                            LozinkaSalt = "dgCBLLURssjdW6U+61MC+Q==",
                            Prezime = "Bibliotekar2",
                            Status = true,
                            Telefon = "06060606"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikUlogaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("KorisnikUlogaId")
                        .HasName("PK__Korisnic__1608726E3384F37A");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisniciUloge", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikUlogaId = 1,
                            IsDeleted = false,
                            KorisnikId = 1,
                            UlogaId = 2
                        },
                        new
                        {
                            KorisnikUlogaId = 2,
                            IsDeleted = false,
                            KorisnikId = 2,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikUlogaId = 3,
                            IsDeleted = false,
                            KorisnikId = 3,
                            UlogaId = 1
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.KorisnikSacuvanaKnjiga", b =>
                {
                    b.Property<int>("KorisnikSacuvanaKnjigaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikSacuvanaKnjigaId"));

                    b.Property<int>("CitalacId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("KnjigaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("KorisnikSacuvanaKnjigaId")
                        .HasName("PK__Korisnik__62EEAC2DF4451BD5");

                    b.HasIndex("CitalacId");

                    b.HasIndex("KnjigaId");

                    b.ToTable("KorisnikSacuvanaKnjiga", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikSacuvanaKnjigaId = 1,
                            CitalacId = 1,
                            IsDeleted = false,
                            KnjigaId = 1
                        },
                        new
                        {
                            KorisnikSacuvanaKnjigaId = 2,
                            CitalacId = 1,
                            IsDeleted = false,
                            KnjigaId = 4
                        },
                        new
                        {
                            KorisnikSacuvanaKnjigaId = 3,
                            CitalacId = 1,
                            IsDeleted = false,
                            KnjigaId = 5
                        },
                        new
                        {
                            KorisnikSacuvanaKnjigaId = 4,
                            CitalacId = 2,
                            IsDeleted = false,
                            KnjigaId = 1
                        },
                        new
                        {
                            KorisnikSacuvanaKnjigaId = 5,
                            CitalacId = 2,
                            IsDeleted = false,
                            KnjigaId = 5
                        },
                        new
                        {
                            KorisnikSacuvanaKnjigaId = 6,
                            CitalacId = 2,
                            IsDeleted = false,
                            KnjigaId = 6
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Obavijesti", b =>
                {
                    b.Property<int>("ObavijestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObavijestId"));

                    b.Property<int?>("BibliotekaId")
                        .HasColumnType("int");

                    b.Property<int?>("CitalacId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("ObavijestId")
                        .HasName("PK__Obavijes__99D330E047910E09");

                    b.HasIndex("BibliotekaId");

                    b.HasIndex("CitalacId");

                    b.ToTable("Obavijesti", (string)null);

                    b.HasData(
                        new
                        {
                            ObavijestId = 2,
                            BibliotekaId = 2,
                            Datum = new DateTime(2024, 8, 4, 17, 6, 34, 513, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Naslov = "Novi naslovi",
                            Tekst = "U našu biblioteku 5.8.2024. stižu novi bestselleri koje ćete moži preuzeti svakog dana u našoj biblioteci."
                        },
                        new
                        {
                            ObavijestId = 3,
                            BibliotekaId = 2,
                            Datum = new DateTime(2024, 8, 4, 17, 8, 3, 270, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Naslov = "Novi naslovi",
                            Tekst = "U našu biblioteku 5.8.2024. stižu novi bestselleri koje ćete moži preuzeti svakog dana u našoj biblioteci."
                        },
                        new
                        {
                            ObavijestId = 4,
                            BibliotekaId = 2,
                            CitalacId = 1,
                            Datum = new DateTime(2024, 8, 4, 17, 47, 26, 453, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Naslov = "Vracanje pozajmice",
                            Tekst = "Prešli ste rok pozajmice, potrebno je istu vratiti u što ranijem roku"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Penali", b =>
                {
                    b.Property<int>("PenalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PenalId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Iznos")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PozajmicaId")
                        .HasColumnType("int");

                    b.Property<int?>("UplataId")
                        .HasColumnType("int");

                    b.Property<int?>("ValutaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("PenalId")
                        .HasName("PK__Penali__CE46DA9C31EE0FBA");

                    b.HasIndex("PozajmicaId");

                    b.HasIndex("UplataId");

                    b.HasIndex("ValutaId");

                    b.ToTable("Penali", (string)null);

                    b.HasData(
                        new
                        {
                            PenalId = 1,
                            IsDeleted = false,
                            Iznos = 10.00m,
                            Opis = "Korisnik vratio knjigu sa pocijepanim stranicama",
                            PozajmicaId = 7,
                            UplataId = 5,
                            ValutaId = 1
                        },
                        new
                        {
                            PenalId = 2,
                            IsDeleted = false,
                            Iznos = 10.00m,
                            Opis = "Korisnik vratio knjigu sa pocijepanim stranicama",
                            PozajmicaId = 8,
                            UplataId = 6,
                            ValutaId = 1
                        },
                        new
                        {
                            PenalId = 3,
                            IsDeleted = false,
                            Iznos = 10.00m,
                            Opis = "Korisnik vratio knjigu sa pocijepanim stranicama",
                            PozajmicaId = 9,
                            ValutaId = 1
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Pozajmice", b =>
                {
                    b.Property<int>("PozajmicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PozajmicaId"));

                    b.Property<int>("BibliotekaKnjigaId")
                        .HasColumnType("int");

                    b.Property<int>("CitalacId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumPreuzimanja")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("MoguceProduziti")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PreporuceniDatumVracanja")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StvarniDatumVracanja")
                        .HasColumnType("datetime");

                    b.Property<int>("Trajanje")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("PozajmicaId")
                        .HasName("PK__Pozajmic__7F2251F1A78DEC0B");

                    b.HasIndex("BibliotekaKnjigaId");

                    b.HasIndex("CitalacId");

                    b.ToTable("Pozajmice", (string)null);

                    b.HasData(
                        new
                        {
                            PozajmicaId = 7,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumPreuzimanja = new DateTime(2024, 6, 26, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(596),
                            IsDeleted = false,
                            MoguceProduziti = true,
                            PreporuceniDatumVracanja = new DateTime(2024, 7, 3, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(601),
                            StvarniDatumVracanja = new DateTime(2024, 7, 2, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(603),
                            Trajanje = 7
                        },
                        new
                        {
                            PozajmicaId = 8,
                            BibliotekaKnjigaId = 15,
                            CitalacId = 1,
                            DatumPreuzimanja = new DateTime(2024, 7, 6, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(607),
                            IsDeleted = false,
                            MoguceProduziti = true,
                            PreporuceniDatumVracanja = new DateTime(2024, 7, 13, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(608),
                            StvarniDatumVracanja = new DateTime(2024, 7, 2, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(610),
                            Trajanje = 7
                        },
                        new
                        {
                            PozajmicaId = 9,
                            BibliotekaKnjigaId = 16,
                            CitalacId = 1,
                            DatumPreuzimanja = new DateTime(2024, 7, 16, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(614),
                            IsDeleted = false,
                            MoguceProduziti = true,
                            PreporuceniDatumVracanja = new DateTime(2024, 7, 13, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(615),
                            StvarniDatumVracanja = new DateTime(2024, 7, 12, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(617),
                            Trajanje = 7
                        },
                        new
                        {
                            PozajmicaId = 10,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 2,
                            DatumPreuzimanja = new DateTime(2024, 6, 26, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(621),
                            IsDeleted = false,
                            MoguceProduziti = true,
                            PreporuceniDatumVracanja = new DateTime(2024, 7, 3, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(622),
                            StvarniDatumVracanja = new DateTime(2024, 7, 2, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(624),
                            Trajanje = 7
                        },
                        new
                        {
                            PozajmicaId = 11,
                            BibliotekaKnjigaId = 13,
                            CitalacId = 2,
                            DatumPreuzimanja = new DateTime(2024, 7, 6, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(628),
                            IsDeleted = false,
                            MoguceProduziti = true,
                            PreporuceniDatumVracanja = new DateTime(2024, 7, 13, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(629),
                            StvarniDatumVracanja = new DateTime(2024, 7, 12, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(631),
                            Trajanje = 7
                        },
                        new
                        {
                            PozajmicaId = 12,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 2,
                            DatumPreuzimanja = new DateTime(2024, 7, 16, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(635),
                            IsDeleted = false,
                            MoguceProduziti = true,
                            PreporuceniDatumVracanja = new DateTime(2024, 7, 23, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(636),
                            StvarniDatumVracanja = new DateTime(2024, 7, 22, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(638),
                            Trajanje = 7
                        },
                        new
                        {
                            PozajmicaId = 13,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumPreuzimanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(642),
                            IsDeleted = false,
                            MoguceProduziti = true,
                            PreporuceniDatumVracanja = new DateTime(2024, 9, 1, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(643),
                            Trajanje = 7
                        },
                        new
                        {
                            PozajmicaId = 14,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 2,
                            DatumPreuzimanja = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(647),
                            IsDeleted = false,
                            MoguceProduziti = true,
                            PreporuceniDatumVracanja = new DateTime(2024, 9, 1, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(648),
                            Trajanje = 7
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.ProduzenjePozajmica", b =>
                {
                    b.Property<int>("ProduzenjePozajmiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduzenjePozajmiceId"));

                    b.Property<DateTime>("DatumZahtjeva")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NoviRok")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Odobreno")
                        .HasColumnType("bit");

                    b.Property<int>("PozajmicaId")
                        .HasColumnType("int");

                    b.Property<int>("Produzenje")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("ProduzenjePozajmiceId")
                        .HasName("PK__Produžen__9B28C15E79BEC522");

                    b.HasIndex("PozajmicaId");

                    b.ToTable("ProduzenjePozajmica", (string)null);
                });

            modelBuilder.Entity("eLibrary.Services.Database.Rezervacije", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervacijaId"));

                    b.Property<int>("BibliotekaKnjigaId")
                        .HasColumnType("int");

                    b.Property<int>("CitalacId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Odobreno")
                        .HasColumnType("bit");

                    b.Property<bool?>("Ponistena")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RokRezervacije")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("RezervacijaId")
                        .HasName("PK__Rezervac__CABA44DDF2AB12E6");

                    b.HasIndex("BibliotekaKnjigaId");

                    b.HasIndex("CitalacId");

                    b.ToTable("Rezervacije", (string)null);

                    b.HasData(
                        new
                        {
                            RezervacijaId = 1,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(677),
                            State = "Ponistena"
                        },
                        new
                        {
                            RezervacijaId = 2,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(681),
                            State = "Zavrsena"
                        },
                        new
                        {
                            RezervacijaId = 3,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 2,
                            DatumKreiranja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(689),
                            State = "Ponistena"
                        },
                        new
                        {
                            RezervacijaId = 4,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 2,
                            DatumKreiranja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(692),
                            State = "Zavrsena"
                        },
                        new
                        {
                            RezervacijaId = 5,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RokRezervacije = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(695),
                            State = "Kreirana"
                        },
                        new
                        {
                            RezervacijaId = 6,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 2,
                            DatumKreiranja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RokRezervacije = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(698),
                            State = "Kreirana"
                        },
                        new
                        {
                            RezervacijaId = 16,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 2,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 29, 7, 850, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 19, 10, 5, 30, 787, DateTimeKind.Unspecified),
                            State = "Ponistena"
                        },
                        new
                        {
                            RezervacijaId = 17,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 2,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 34, 46, 240, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 19, 10, 5, 29, 140, DateTimeKind.Unspecified),
                            State = "Ponistena"
                        },
                        new
                        {
                            RezervacijaId = 18,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 11, 15, 45, 20, 837, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 19, 10, 5, 27, 263, DateTimeKind.Unspecified),
                            State = "Ponistena"
                        },
                        new
                        {
                            RezervacijaId = 19,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 11, 16, 20, 21, 720, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 18, 13, 11, 24, 200, DateTimeKind.Unspecified),
                            State = "Zavrsena"
                        },
                        new
                        {
                            RezervacijaId = 20,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 11, 16, 28, 4, 540, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 17, 20, 47, 49, 410, DateTimeKind.Unspecified),
                            State = "Zavrsena"
                        },
                        new
                        {
                            RezervacijaId = 21,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 11, 17, 38, 31, 480, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 12, 21, 43, 9, 177, DateTimeKind.Unspecified),
                            State = "Zavrsena"
                        },
                        new
                        {
                            RezervacijaId = 22,
                            BibliotekaKnjigaId = 13,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 11, 17, 39, 31, 480, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 12, 18, 38, 3, 653, DateTimeKind.Unspecified),
                            State = "Zavrsena"
                        },
                        new
                        {
                            RezervacijaId = 23,
                            BibliotekaKnjigaId = 15,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 18, 20, 24, 40, 827, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 19, 23, 9, 18, 867, DateTimeKind.Unspecified),
                            State = "Ponistena"
                        },
                        new
                        {
                            RezervacijaId = 24,
                            BibliotekaKnjigaId = 15,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 18, 20, 24, 42, 783, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Odobreno = true,
                            Ponistena = true,
                            RokRezervacije = new DateTime(2024, 8, 19, 23, 9, 57, 580, DateTimeKind.Unspecified),
                            State = "Zavrsena"
                        },
                        new
                        {
                            RezervacijaId = 25,
                            BibliotekaKnjigaId = 12,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 19, 18, 4, 28, 773, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Ponistena = false,
                            State = "Kreirana"
                        },
                        new
                        {
                            RezervacijaId = 26,
                            BibliotekaKnjigaId = 22,
                            CitalacId = 1,
                            DatumKreiranja = new DateTime(2024, 8, 20, 19, 9, 7, 493, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Ponistena = true,
                            State = "Ponistena"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.TipClanarineBiblioteke", b =>
                {
                    b.Property<int>("TipClanarineBibliotekaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipClanarineBibliotekaId"));

                    b.Property<int>("BibliotekaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Iznos")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Trajanje")
                        .HasColumnType("int");

                    b.Property<int>("ValutaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("TipClanarineBibliotekaId")
                        .HasName("PK__TipClana__4558C5A1507579E8");

                    b.HasIndex("BibliotekaId");

                    b.HasIndex("ValutaId");

                    b.ToTable("TipClanarineBiblioteke", (string)null);

                    b.HasData(
                        new
                        {
                            TipClanarineBibliotekaId = 1,
                            BibliotekaId = 1,
                            IsDeleted = false,
                            Iznos = 4.00m,
                            Naziv = "Mjesečna",
                            Trajanje = 30,
                            ValutaId = 1
                        },
                        new
                        {
                            TipClanarineBibliotekaId = 2,
                            BibliotekaId = 1,
                            IsDeleted = false,
                            Iznos = 10.00m,
                            Naziv = "Tromjesečna",
                            Trajanje = 90,
                            ValutaId = 1
                        },
                        new
                        {
                            TipClanarineBibliotekaId = 3,
                            BibliotekaId = 1,
                            IsDeleted = false,
                            Iznos = 15.00m,
                            Naziv = "Polugodišnja",
                            Trajanje = 180,
                            ValutaId = 1
                        },
                        new
                        {
                            TipClanarineBibliotekaId = 4,
                            BibliotekaId = 1,
                            IsDeleted = false,
                            Iznos = 20.00m,
                            Naziv = "Godišnja",
                            Trajanje = 365,
                            ValutaId = 1
                        },
                        new
                        {
                            TipClanarineBibliotekaId = 5,
                            BibliotekaId = 2,
                            IsDeleted = false,
                            Iznos = 5.00m,
                            Naziv = "Mjesečna",
                            Trajanje = 30,
                            ValutaId = 1
                        },
                        new
                        {
                            TipClanarineBibliotekaId = 6,
                            BibliotekaId = 2,
                            IsDeleted = false,
                            Iznos = 30.00m,
                            Naziv = "Godišnja",
                            Trajanje = 365,
                            ValutaId = 1
                        },
                        new
                        {
                            TipClanarineBibliotekaId = 7,
                            BibliotekaId = 3,
                            IsDeleted = false,
                            Iznos = 35.00m,
                            Naziv = "Godišnja",
                            Trajanje = 365,
                            ValutaId = 1
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.TipoviUplatum", b =>
                {
                    b.Property<int>("TipUplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipUplateId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("TipUplateId")
                        .HasName("PK__TipoviUp__8E02EB6724A00276");

                    b.ToTable("TipoviUplata");

                    b.HasData(
                        new
                        {
                            TipUplateId = 1,
                            IsDeleted = false,
                            Naziv = "Online"
                        },
                        new
                        {
                            TipUplateId = 2,
                            IsDeleted = false,
                            Naziv = "Keš"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("UlogaId")
                        .HasName("PK__Uloge__DCAB23CB2BD0FE6F");

                    b.ToTable("Uloge", (string)null);

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            IsDeleted = false,
                            Naziv = "Bibliotekar"
                        },
                        new
                        {
                            UlogaId = 2,
                            IsDeleted = false,
                            Naziv = "Administrator"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Upiti", b =>
                {
                    b.Property<int>("UpitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpitId"));

                    b.Property<int>("CitalacId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Odgovor")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Upit")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("UpitId")
                        .HasName("PK__Upiti__EF8C101287181849");

                    b.HasIndex("CitalacId");

                    b.ToTable("Upiti", (string)null);

                    b.HasData(
                        new
                        {
                            UpitId = 1,
                            CitalacId = 1,
                            IsDeleted = false,
                            Naslov = "Greška u aplikaciji",
                            Odgovor = "Problem će uskoro biti riješen.",
                            Upit = "Nakon klika potrebno je nešto napraviti..."
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Uplate", b =>
                {
                    b.Property<int>("UplataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UplataId"));

                    b.Property<int>("BibliotekaId")
                        .HasColumnType("int");

                    b.Property<int>("CitalacId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumUplate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Iznos")
                        .HasColumnType("decimal(19, 2)");

                    b.Property<int>("TipUplateId")
                        .HasColumnType("int");

                    b.Property<int>("ValutaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("UplataId")
                        .HasName("PK__Uplate__C5B165E60EBF952A");

                    b.HasIndex("BibliotekaId");

                    b.HasIndex("CitalacId");

                    b.HasIndex("TipUplateId");

                    b.HasIndex("ValutaId");

                    b.ToTable("Uplate", (string)null);

                    b.HasData(
                        new
                        {
                            UplataId = 1,
                            BibliotekaId = 2,
                            CitalacId = 1,
                            DatumUplate = new DateTime(2024, 8, 10, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(756),
                            IsDeleted = false,
                            Iznos = 4.00m,
                            TipUplateId = 1,
                            ValutaId = 1
                        },
                        new
                        {
                            UplataId = 2,
                            BibliotekaId = 2,
                            CitalacId = 1,
                            DatumUplate = new DateTime(2024, 9, 9, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(761),
                            IsDeleted = false,
                            Iznos = 10.00m,
                            TipUplateId = 1,
                            ValutaId = 1
                        },
                        new
                        {
                            UplataId = 3,
                            BibliotekaId = 2,
                            CitalacId = 2,
                            DatumUplate = new DateTime(2024, 8, 10, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(764),
                            IsDeleted = false,
                            Iznos = 4.00m,
                            TipUplateId = 2,
                            ValutaId = 1
                        },
                        new
                        {
                            UplataId = 4,
                            BibliotekaId = 2,
                            CitalacId = 2,
                            DatumUplate = new DateTime(2024, 9, 9, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(768),
                            IsDeleted = false,
                            Iznos = 10.00m,
                            TipUplateId = 1,
                            ValutaId = 1
                        },
                        new
                        {
                            UplataId = 5,
                            BibliotekaId = 2,
                            CitalacId = 1,
                            DatumUplate = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(771),
                            IsDeleted = false,
                            Iznos = 10.00m,
                            TipUplateId = 1,
                            ValutaId = 1
                        },
                        new
                        {
                            UplataId = 6,
                            BibliotekaId = 2,
                            CitalacId = 2,
                            DatumUplate = new DateTime(2024, 8, 25, 16, 38, 39, 597, DateTimeKind.Local).AddTicks(774),
                            IsDeleted = false,
                            Iznos = 10.00m,
                            TipUplateId = 1,
                            ValutaId = 1
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Uvezi", b =>
                {
                    b.Property<int>("UvezId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UvezId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("UvezId")
                        .HasName("PK__Uvezi__C4713756A3F9E717");

                    b.ToTable("Uvezi", (string)null);

                    b.HasData(
                        new
                        {
                            UvezId = 1,
                            IsDeleted = false,
                            Naziv = "Mehki"
                        },
                        new
                        {
                            UvezId = 2,
                            IsDeleted = false,
                            Naziv = "Tvrdi"
                        },
                        new
                        {
                            UvezId = 3,
                            IsDeleted = false,
                            Naziv = "Bez uveza"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.Valute", b =>
                {
                    b.Property<int>("ValutaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValutaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Skracenica")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("ValutaId")
                        .HasName("PK__Valute__40CFDB4E5F926FDA");

                    b.ToTable("Valute", (string)null);

                    b.HasData(
                        new
                        {
                            ValutaId = 1,
                            IsDeleted = false,
                            Naziv = "Konvertibilna marka",
                            Skracenica = "KM"
                        },
                        new
                        {
                            ValutaId = 2,
                            IsDeleted = false,
                            Naziv = "Euro",
                            Skracenica = "EUR"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.VrsteGrade", b =>
                {
                    b.Property<int>("VrstaGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrstaGradeId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("VrstaGradeId")
                        .HasName("PK__VrsteGra__D25BAB10DD033220");

                    b.ToTable("VrsteGrade", (string)null);

                    b.HasData(
                        new
                        {
                            VrstaGradeId = 1,
                            IsDeleted = false,
                            Naziv = "Knjiga"
                        },
                        new
                        {
                            VrstaGradeId = 3,
                            IsDeleted = false,
                            Naziv = "Časopis"
                        },
                        new
                        {
                            VrstaGradeId = 4,
                            IsDeleted = false,
                            Naziv = "E-Knjiga"
                        },
                        new
                        {
                            VrstaGradeId = 5,
                            IsDeleted = false,
                            Naziv = "Audio knjiga"
                        },
                        new
                        {
                            VrstaGradeId = 6,
                            IsDeleted = false,
                            Naziv = "Članak"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.VrsteSadrzaja", b =>
                {
                    b.Property<int>("VrstaSadrzajaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VrstaSadrzajaId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("VrijemeBrisanja")
                        .HasColumnType("datetime2");

                    b.HasKey("VrstaSadrzajaId")
                        .HasName("PK__VrsteSad__0499598C353505B0");

                    b.ToTable("VrsteSadrzaja", (string)null);

                    b.HasData(
                        new
                        {
                            VrstaSadrzajaId = 1,
                            IsDeleted = false,
                            Naziv = "Roman"
                        },
                        new
                        {
                            VrstaSadrzajaId = 2,
                            IsDeleted = false,
                            Naziv = "Poezija"
                        },
                        new
                        {
                            VrstaSadrzajaId = 3,
                            IsDeleted = false,
                            Naziv = "Fantastika"
                        },
                        new
                        {
                            VrstaSadrzajaId = 4,
                            IsDeleted = false,
                            Naziv = "Putopis"
                        },
                        new
                        {
                            VrstaSadrzajaId = 5,
                            IsDeleted = false,
                            Naziv = "Kriminalistika"
                        },
                        new
                        {
                            VrstaSadrzajaId = 6,
                            IsDeleted = false,
                            Naziv = "Ljubavni roman"
                        },
                        new
                        {
                            VrstaSadrzajaId = 7,
                            IsDeleted = false,
                            Naziv = "Triler"
                        },
                        new
                        {
                            VrstaSadrzajaId = 8,
                            IsDeleted = false,
                            Naziv = "Vestern"
                        },
                        new
                        {
                            VrstaSadrzajaId = 9,
                            IsDeleted = false,
                            Naziv = "Modernizam"
                        },
                        new
                        {
                            VrstaSadrzajaId = 10,
                            IsDeleted = false,
                            Naziv = "Pustolovni roman"
                        },
                        new
                        {
                            VrstaSadrzajaId = 11,
                            IsDeleted = false,
                            Naziv = "Naucna fantastika"
                        },
                        new
                        {
                            VrstaSadrzajaId = 12,
                            IsDeleted = false,
                            Naziv = "Doktorski rad"
                        },
                        new
                        {
                            VrstaSadrzajaId = 13,
                            IsDeleted = false,
                            Naziv = "Diplomski rad"
                        },
                        new
                        {
                            VrstaSadrzajaId = 14,
                            IsDeleted = false,
                            Naziv = "Magistarski rad"
                        },
                        new
                        {
                            VrstaSadrzajaId = 15,
                            IsDeleted = false,
                            Naziv = "Stručni rad"
                        },
                        new
                        {
                            VrstaSadrzajaId = 16,
                            IsDeleted = false,
                            Naziv = "Udžbenik"
                        },
                        new
                        {
                            VrstaSadrzajaId = 17,
                            IsDeleted = false,
                            Naziv = "Tehnički izvještaj"
                        },
                        new
                        {
                            VrstaSadrzajaId = 18,
                            IsDeleted = false,
                            Naziv = "Zbornik"
                        },
                        new
                        {
                            VrstaSadrzajaId = 19,
                            IsDeleted = false,
                            Naziv = "Rječnik"
                        },
                        new
                        {
                            VrstaSadrzajaId = 21,
                            IsDeleted = false,
                            Naziv = "Istraživački rad"
                        },
                        new
                        {
                            VrstaSadrzajaId = 22,
                            IsDeleted = false,
                            Naziv = "Enciklopedija"
                        },
                        new
                        {
                            VrstaSadrzajaId = 23,
                            IsDeleted = false,
                            Naziv = "Biografija"
                        },
                        new
                        {
                            VrstaSadrzajaId = 24,
                            IsDeleted = false,
                            Naziv = "Književnost"
                        },
                        new
                        {
                            VrstaSadrzajaId = 25,
                            IsDeleted = false,
                            Naziv = "Bajka"
                        },
                        new
                        {
                            VrstaSadrzajaId = 26,
                            IsDeleted = false,
                            Naziv = "Dječije knjige"
                        });
                });

            modelBuilder.Entity("eLibrary.Services.Database.BibliotekaCitaociZabrane", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Biblioteke", "Biblioteka")
                        .WithMany("BibliotekaCitaociZabranes")
                        .HasForeignKey("BibliotekaId")
                        .IsRequired()
                        .HasConstraintName("FKBiblioteka338157");

                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany("BibliotekaCitaociZabranes")
                        .HasForeignKey("CitalacId")
                        .IsRequired()
                        .HasConstraintName("FKBiblioteka377889");

                    b.Navigation("Biblioteka");

                    b.Navigation("Citalac");
                });

            modelBuilder.Entity("eLibrary.Services.Database.BibliotekaKnjige", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Biblioteke", "Biblioteka")
                        .WithMany("BibliotekaKnjiges")
                        .HasForeignKey("BibliotekaId")
                        .IsRequired()
                        .HasConstraintName("FKBiblioteka353465");

                    b.HasOne("eLibrary.Services.Database.Knjige", "Knjiga")
                        .WithMany("BibliotekaKnjiges")
                        .HasForeignKey("KnjigaId")
                        .IsRequired()
                        .HasConstraintName("FKBiblioteka650765");

                    b.Navigation("Biblioteka");

                    b.Navigation("Knjiga");
                });

            modelBuilder.Entity("eLibrary.Services.Database.BibliotekaUposleni", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Biblioteke", "Biblioteka")
                        .WithMany("BibliotekaUposlenis")
                        .HasForeignKey("BibliotekaId")
                        .IsRequired()
                        .HasConstraintName("FKBiblioteka763883");

                    b.HasOne("eLibrary.Services.Database.Korisnici", "Korisnik")
                        .WithMany("BibliotekaUposlenis")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FKBiblioteka995992");

                    b.Navigation("Biblioteka");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Biblioteke", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Kantoni", "Kanton")
                        .WithMany("Bibliotekes")
                        .HasForeignKey("KantonId")
                        .IsRequired()
                        .HasConstraintName("FKBiblioteke432909");

                    b.Navigation("Kanton");
                });

            modelBuilder.Entity("eLibrary.Services.Database.CitalacKnjigaLog", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany()
                        .HasForeignKey("CitalacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eLibrary.Services.Database.Knjige", "Knjiga")
                        .WithMany()
                        .HasForeignKey("KnjigaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citalac");

                    b.Navigation("Knjiga");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Citaoci", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Kantoni", "Kanton")
                        .WithMany("Citaocis")
                        .HasForeignKey("KantonId")
                        .IsRequired()
                        .HasConstraintName("FKCitaoci7210");

                    b.Navigation("Kanton");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Clanarine", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Biblioteke", "Biblioteka")
                        .WithMany("Clanarines")
                        .HasForeignKey("BibliotekaId")
                        .IsRequired()
                        .HasConstraintName("FKClanarine35451");

                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany("Clanarines")
                        .HasForeignKey("CitalacId")
                        .IsRequired()
                        .HasConstraintName("FKClanarine4281");

                    b.HasOne("eLibrary.Services.Database.TipClanarineBiblioteke", "TipClanarineBiblioteka")
                        .WithMany("Clanarines")
                        .HasForeignKey("TipClanarineBibliotekaId")
                        .IsRequired()
                        .HasConstraintName("FKClanarine627290");

                    b.HasOne("eLibrary.Services.Database.Uplate", "Uplate")
                        .WithMany("Clanarines")
                        .HasForeignKey("UplateId")
                        .IsRequired()
                        .HasConstraintName("FKClanarine777383");

                    b.Navigation("Biblioteka");

                    b.Navigation("Citalac");

                    b.Navigation("TipClanarineBiblioteka");

                    b.Navigation("Uplate");
                });

            modelBuilder.Entity("eLibrary.Services.Database.KnjigaAutori", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Autori", "Autor")
                        .WithMany("KnjigaAutoris")
                        .HasForeignKey("AutorId")
                        .IsRequired()
                        .HasConstraintName("FKKnjigaAuto482123");

                    b.HasOne("eLibrary.Services.Database.Knjige", "Knjiga")
                        .WithMany("KnjigaAutoris")
                        .HasForeignKey("KnjigaId")
                        .IsRequired()
                        .HasConstraintName("FKKnjigaAuto167960");

                    b.Navigation("Autor");

                    b.Navigation("Knjiga");
                });

            modelBuilder.Entity("eLibrary.Services.Database.KnjigaCiljneGrupe", b =>
                {
                    b.HasOne("eLibrary.Services.Database.CiljneGrupe", "CiljnaGrupa")
                        .WithMany("KnjigaCiljneGrupes")
                        .HasForeignKey("CiljnaGrupaId")
                        .IsRequired()
                        .HasConstraintName("FKKnjigaCilj190689");

                    b.HasOne("eLibrary.Services.Database.Knjige", "Knjiga")
                        .WithMany("KnjigaCiljneGrupes")
                        .HasForeignKey("KnjigaId")
                        .IsRequired()
                        .HasConstraintName("FKKnjigaCilj768005");

                    b.Navigation("CiljnaGrupa");

                    b.Navigation("Knjiga");
                });

            modelBuilder.Entity("eLibrary.Services.Database.KnjigaVrsteSadrzaja", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Knjige", "Knjiga")
                        .WithMany("KnjigaVrsteSadrzajas")
                        .HasForeignKey("KnjigaId")
                        .IsRequired()
                        .HasConstraintName("FKKnjigaVrst688589");

                    b.HasOne("eLibrary.Services.Database.VrsteSadrzaja", "VrstaSadrzaja")
                        .WithMany("KnjigaVrsteSadrzajas")
                        .HasForeignKey("VrstaSadrzajaId")
                        .IsRequired()
                        .HasConstraintName("FKKnjigaVrst124097");

                    b.Navigation("Knjiga");

                    b.Navigation("VrstaSadrzaja");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Knjige", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Izdavaci", "Izdavac")
                        .WithMany("Knjiges")
                        .HasForeignKey("IzdavacId")
                        .IsRequired()
                        .HasConstraintName("FKKnjige283606");

                    b.HasOne("eLibrary.Services.Database.Jezici", "Jezik")
                        .WithMany("Knjiges")
                        .HasForeignKey("JezikId")
                        .IsRequired()
                        .HasConstraintName("FKKnjige125291");

                    b.HasOne("eLibrary.Services.Database.Uvezi", "Uvez")
                        .WithMany("Knjiges")
                        .HasForeignKey("UvezId")
                        .IsRequired()
                        .HasConstraintName("FKKnjige620887");

                    b.HasOne("eLibrary.Services.Database.VrsteGrade", "VrstaGrade")
                        .WithMany("Knjiges")
                        .HasForeignKey("VrsteGradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Knjige_VrsteGrade");

                    b.Navigation("Izdavac");

                    b.Navigation("Jezik");

                    b.Navigation("Uvez");

                    b.Navigation("VrstaGrade");
                });

            modelBuilder.Entity("eLibrary.Services.Database.KorisniciUloge", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FKKorisniciU569719");

                    b.HasOne("eLibrary.Services.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("UlogaId")
                        .IsRequired()
                        .HasConstraintName("FKKorisniciU863268");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eLibrary.Services.Database.KorisnikSacuvanaKnjiga", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany("KorisnikSacuvanaKnjigas")
                        .HasForeignKey("CitalacId")
                        .IsRequired()
                        .HasConstraintName("FKKorisnikSa44095");

                    b.HasOne("eLibrary.Services.Database.Knjige", "Knjiga")
                        .WithMany("KorisnikSacuvanaKnjigas")
                        .HasForeignKey("KnjigaId")
                        .IsRequired()
                        .HasConstraintName("FKKorisnikSa920403");

                    b.Navigation("Citalac");

                    b.Navigation("Knjiga");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Obavijesti", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Biblioteke", "Biblioteka")
                        .WithMany("Obavijestis")
                        .HasForeignKey("BibliotekaId")
                        .HasConstraintName("FKObavijesti206190");

                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany("Obavijestis")
                        .HasForeignKey("CitalacId")
                        .HasConstraintName("FKObavijesti245922");

                    b.Navigation("Biblioteka");

                    b.Navigation("Citalac");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Penali", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Pozajmice", "Pozajmica")
                        .WithMany("Penalis")
                        .HasForeignKey("PozajmicaId")
                        .IsRequired()
                        .HasConstraintName("FKPenali769294");

                    b.HasOne("eLibrary.Services.Database.Uplate", "Uplata")
                        .WithMany("Penalis")
                        .HasForeignKey("UplataId")
                        .HasConstraintName("FKPenali189592");

                    b.HasOne("eLibrary.Services.Database.Valute", "Valuta")
                        .WithMany()
                        .HasForeignKey("ValutaId");

                    b.Navigation("Pozajmica");

                    b.Navigation("Uplata");

                    b.Navigation("Valuta");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Pozajmice", b =>
                {
                    b.HasOne("eLibrary.Services.Database.BibliotekaKnjige", "BibliotekaKnjiga")
                        .WithMany("Pozajmices")
                        .HasForeignKey("BibliotekaKnjigaId")
                        .IsRequired()
                        .HasConstraintName("FKPozajmice338406");

                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany("Pozajmices")
                        .HasForeignKey("CitalacId")
                        .IsRequired()
                        .HasConstraintName("FKPozajmice865313");

                    b.Navigation("BibliotekaKnjiga");

                    b.Navigation("Citalac");
                });

            modelBuilder.Entity("eLibrary.Services.Database.ProduzenjePozajmica", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Pozajmice", "Pozajmica")
                        .WithMany("ProduzenjePozajmicas")
                        .HasForeignKey("PozajmicaId")
                        .IsRequired()
                        .HasConstraintName("FKProduženje639386");

                    b.Navigation("Pozajmica");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Rezervacije", b =>
                {
                    b.HasOne("eLibrary.Services.Database.BibliotekaKnjige", "BibliotekaKnjiga")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("BibliotekaKnjigaId")
                        .IsRequired()
                        .HasConstraintName("FKRezervacij817101");

                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("CitalacId")
                        .IsRequired()
                        .HasConstraintName("FKRezervacij386618");

                    b.Navigation("BibliotekaKnjiga");

                    b.Navigation("Citalac");
                });

            modelBuilder.Entity("eLibrary.Services.Database.TipClanarineBiblioteke", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Biblioteke", "Biblioteka")
                        .WithMany("TipClanarineBibliotekes")
                        .HasForeignKey("BibliotekaId")
                        .IsRequired()
                        .HasConstraintName("FKTipClanari390390");

                    b.HasOne("eLibrary.Services.Database.Valute", "Valuta")
                        .WithMany("TipClanarineBibliotekes")
                        .HasForeignKey("ValutaId")
                        .IsRequired()
                        .HasConstraintName("FKTipClanari83073");

                    b.Navigation("Biblioteka");

                    b.Navigation("Valuta");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Upiti", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany("Upitis")
                        .HasForeignKey("CitalacId")
                        .IsRequired()
                        .HasConstraintName("FKUpiti447286");

                    b.Navigation("Citalac");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Uplate", b =>
                {
                    b.HasOne("eLibrary.Services.Database.Biblioteke", "Biblioteka")
                        .WithMany("Uplates")
                        .HasForeignKey("BibliotekaId")
                        .IsRequired()
                        .HasConstraintName("FKUplate801485");

                    b.HasOne("eLibrary.Services.Database.Citaoci", "Citalac")
                        .WithMany("Uplates")
                        .HasForeignKey("CitalacId")
                        .IsRequired()
                        .HasConstraintName("FKUplate841217");

                    b.HasOne("eLibrary.Services.Database.TipoviUplatum", "TipUplate")
                        .WithMany("Uplates")
                        .HasForeignKey("TipUplateId")
                        .IsRequired()
                        .HasConstraintName("FKUplate728453");

                    b.HasOne("eLibrary.Services.Database.Valute", "Valuta")
                        .WithMany("Uplates")
                        .HasForeignKey("ValutaId")
                        .IsRequired()
                        .HasConstraintName("FKUplate862787");

                    b.Navigation("Biblioteka");

                    b.Navigation("Citalac");

                    b.Navigation("TipUplate");

                    b.Navigation("Valuta");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Autori", b =>
                {
                    b.Navigation("KnjigaAutoris");
                });

            modelBuilder.Entity("eLibrary.Services.Database.BibliotekaKnjige", b =>
                {
                    b.Navigation("Pozajmices");

                    b.Navigation("Rezervacijes");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Biblioteke", b =>
                {
                    b.Navigation("BibliotekaCitaociZabranes");

                    b.Navigation("BibliotekaKnjiges");

                    b.Navigation("BibliotekaUposlenis");

                    b.Navigation("Clanarines");

                    b.Navigation("Obavijestis");

                    b.Navigation("TipClanarineBibliotekes");

                    b.Navigation("Uplates");
                });

            modelBuilder.Entity("eLibrary.Services.Database.CiljneGrupe", b =>
                {
                    b.Navigation("KnjigaCiljneGrupes");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Citaoci", b =>
                {
                    b.Navigation("BibliotekaCitaociZabranes");

                    b.Navigation("Clanarines");

                    b.Navigation("KorisnikSacuvanaKnjigas");

                    b.Navigation("Obavijestis");

                    b.Navigation("Pozajmices");

                    b.Navigation("Rezervacijes");

                    b.Navigation("Upitis");

                    b.Navigation("Uplates");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Izdavaci", b =>
                {
                    b.Navigation("Knjiges");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Jezici", b =>
                {
                    b.Navigation("Knjiges");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Kantoni", b =>
                {
                    b.Navigation("Bibliotekes");

                    b.Navigation("Citaocis");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Knjige", b =>
                {
                    b.Navigation("BibliotekaKnjiges");

                    b.Navigation("KnjigaAutoris");

                    b.Navigation("KnjigaCiljneGrupes");

                    b.Navigation("KnjigaVrsteSadrzajas");

                    b.Navigation("KorisnikSacuvanaKnjigas");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Korisnici", b =>
                {
                    b.Navigation("BibliotekaUposlenis");

                    b.Navigation("KorisniciUloges");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Pozajmice", b =>
                {
                    b.Navigation("Penalis");

                    b.Navigation("ProduzenjePozajmicas");
                });

            modelBuilder.Entity("eLibrary.Services.Database.TipClanarineBiblioteke", b =>
                {
                    b.Navigation("Clanarines");
                });

            modelBuilder.Entity("eLibrary.Services.Database.TipoviUplatum", b =>
                {
                    b.Navigation("Uplates");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloges");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Uplate", b =>
                {
                    b.Navigation("Clanarines");

                    b.Navigation("Penalis");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Uvezi", b =>
                {
                    b.Navigation("Knjiges");
                });

            modelBuilder.Entity("eLibrary.Services.Database.Valute", b =>
                {
                    b.Navigation("TipClanarineBibliotekes");

                    b.Navigation("Uplates");
                });

            modelBuilder.Entity("eLibrary.Services.Database.VrsteGrade", b =>
                {
                    b.Navigation("Knjiges");
                });

            modelBuilder.Entity("eLibrary.Services.Database.VrsteSadrzaja", b =>
                {
                    b.Navigation("KnjigaVrsteSadrzajas");
                });
#pragma warning restore 612, 618
        }
    }
}
